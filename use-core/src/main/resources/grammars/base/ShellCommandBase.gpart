////////////////////////////////////////////////////////////////////////////////
// the shell understands soil statements and a set of "legacy statements", which
// maps CMD language constructs to equivalent soil statements
////////////////////////////////////////////////////////////////////////////////
shellCommandOnly returns [ASTStatement n]
:
  (stat)=> s = stat
  { $n = $s.n; }
  |
  (legacyStat)=> l = legacyStat
  { $n = $l.n; }
;

////////////////////////////////////////////////////////////////////////////////
// the shell understands soil statements and a set of "legacy statements", which
// maps CMD language constructs to equivalent soil statements
////////////////////////////////////////////////////////////////////////////////
shellCommand returns [ASTStatement n]
:
  (legacyStat)=> l = legacyStat EOF
  { $n = $l.n; }
  |
  (stat)=> s = stat EOF
  { $n = $s.n; }
;


////////////////////////////////////////////////////////////////////////////////
// Sequence of legacy Cmds
//
// Cmds could be parsed as sequence of Cmds delimited by whitespaces
////////////////////////////////////////////////////////////////////////////////
legacyStat returns [ASTStatement n]
@init {
  ASTSequenceStatement seq = new ASTSequenceStatement($start);
}
:
  loe = legacyOpEnter
  { 
    $n = $loe.n;
  }
  |
  lox = legacyOpExit
   { 
    $n = $lox.n; 
  }
  |
  nextLegacyStat[seq]
  (
    nextLegacyStat[seq]
  )* 
  
  { 
    $n = seq.simplify();
  }
;


////////////////////////////////////////////////////////////////////////////////
// parses the next legacy statement and adds it to seq
////////////////////////////////////////////////////////////////////////////////
nextLegacyStat[ASTSequenceStatement seq]
:
  s = singleLegacyStat
  SEMI?
  
  {
     seq.addStatement($s.n);
  }
;


////////////////////////////////////////////////////////////////////////////////
// the concrete legacy statements
////////////////////////////////////////////////////////////////////////////////
singleLegacyStat returns [ASTStatement n]
:
    lcr = legacyCreate        { $n = $lcr.n; }
  | lca = legacyCreateAssign  { $n = $lca.n; }
  | lci = legacyCreateInsert  { $n = $lci.n; }
  | llt = legacyLet           { $n = $llt.n; }
  //| loe = legacyOpEnter       { $n = $loe.n; }
  //| lox = legacyOpExit        { $n = $lox.n; }
  | lex = legacyExecute       { $n = $lex.n; }
  | ods = objDestroyStat      { $n = $ods.n; }
  | 'set' e=expression aas = attAssignStat[$e.n] { $n = $aas.n; }
  | lis = lnkInsStat          { $n = $lis.n; }
  | lds = lnkDelStat          { $n = $lds.n; }
;


////////////////////////////////////////////////////////////////////////////////
// object creation without explicit variable binding
//
// syntax:
// 'create' objectNames ':' objectType
//
// semantics:
// for each object name a new object of class objectType is created 
////////////////////////////////////////////////////////////////////////////////
legacyCreate returns [ASTStatement n]
:
  'create'
  objNames = identListMin1
  COLON
  objType = objectType
  
  { 
    ASTSequenceStatement seq = new ASTSequenceStatement($start);
    
    for (String objName : $objNames.n) {
      seq.addStatement(
        new ASTNewObjectStatement(
          $start,
          $objType.n, 
          new ASTStringLiteral(objName)));
    }
    
    $n = seq.simplify();
  }
;

objectType returns [ASTSimpleType n]
:
    (modelQualifier=IDENT HASH)? name=IDENT
    {
        if ($modelQualifier != null) { $n = new ASTModelQualifiedType($modelQualifier, $name); }
        else { $n = new ASTSimpleType($name); }
    }
;


////////////////////////////////////////////////////////////////////////////////
// object creation with explicit variable binding
//
// syntax:
// 'assign' variableNames ':= create' objectType
//
// semantics:
// for each variable name supplied, an object of class objectType and with a 
// unique object name is created and bound to that variable
////////////////////////////////////////////////////////////////////////////////
legacyCreateAssign returns [ASTStatement n]
:
  'assign'
  varNames = identListMin1
  COLON_EQUAL
  'create'
  objType = simpleType
  
  {
    ASTSequenceStatement seq = new ASTSequenceStatement($start);
    
    for (String varName : $varNames.n) {
      seq.addStatement(
        new ASTVariableAssignmentStatement(
          $start,
          varName, 
          new ASTRValueNewObject($start, $objType.n)));
    }
    
    $n = seq.simplify();
  }
;


////////////////////////////////////////////////////////////////////////////////
// link object creation
//
// syntax:
// 'create' name ':' asClassName 'between' '(' participants ')'
//
// semantics:
// creates a link object of type 'asClassName' with object name 'name' 
// between some participating objects defined by 'participants' and assigns the 
// created object to variable 'name'
////////////////////////////////////////////////////////////////////////////////
legacyCreateInsert returns [ASTVariableAssignmentStatement n]
:
  'create'
  name = IDENT
  COLON
  asClassName = simpleType
  'between'
  LPAREN
    participants = rValListMin2WithOptionalQualifiers
  RPAREN
  
  {
    ASTNewLinkObjectStatement nlo = 
      new ASTNewLinkObjectStatement(
        $start,
        $asClassName.n, 
        $participants.participans,
        $participants.qualifiers,
        new ASTStringLiteral($name));
  
    $n = new ASTVariableAssignmentStatement($start,
      $name.text,
      new ASTRValueNewLinkObject(nlo));
  }
;


////////////////////////////////////////////////////////////////////////////////
// variable assignment with mandatory type
//
// syntax:
// 'let' varName [':' varType] '=' e
//
// semantics:
// creates a variable with name 'varname' and type 'varType' (if supplied) and
// assigns the value of ocl expression 'e' to it
////////////////////////////////////////////////////////////////////////////////
legacyLet returns [ASTVariableAssignmentStatement n]
:
  'let'
  varName = IDENT
  (
    COLON
    varType = type
  )?
  EQUAL
  e = inSoilExpression
 
  { $n = new ASTVariableAssignmentStatement($start, $varName.text, $e.n, $varType.n); }
;


////////////////////////////////////////////////////////////////////////////////
// enter operation
//
// syntax:
// 'openter' object '.' operation '(' arguments ')'
//
// semantics:
// prepares execution of an operation by preparing the stack (e.g. pushes the
// arguments). NOTE: there is no equivalent construct in the soil language, 
// i.e. there is no soil statement which achieves this effect.
////////////////////////////////////////////////////////////////////////////////
legacyOpEnter returns [ASTEnterOperationStatement n]
:
  'openter'
  obj = inSoilExpression
  op = IDENT
  LPAREN
    args = exprList
  RPAREN
  
  { $n = new ASTEnterOperationStatement($start, $obj.n, $op.text, $args.n); }
;


////////////////////////////////////////////////////////////////////////////////
// exit operation
// 
// syntax:
// 'opexit' [retVal]
//
// semantics:
// stops the execution of the currently active operation (pops the stack, etc)
// the result of the operation (i.e. the return value) can optionally be 
// supplied. NOTE: there is no equivalent construct in the soil language, 
// i.e. there is no soil statement which achieves this effect.
////////////////////////////////////////////////////////////////////////////////
legacyOpExit returns [ASTStatement n]
:
  'opexit' ((inSoilExpression)=> retVal = inSoilExpression | nothing)
  
  { $n = new ASTExitOperationStatement($start, $retVal.n); }
;


////////////////////////////////////////////////////////////////////////////////
// execute operation with side effects
//
// syntax:
// 'execute' expression
//
// semantics:
// leftover construct from UML AL experiments. essentially a no op
////////////////////////////////////////////////////////////////////////////////
legacyExecute returns [ASTStatement n]
:
  'execute'
  expression
  
  { 
    reportWarning("the execute command is not supported in this version"); 
    $n = new ASTEmptyStatement();
  }
;
